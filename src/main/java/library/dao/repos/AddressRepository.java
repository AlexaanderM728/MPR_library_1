package library.dao.repos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.naming.spi.DirStateFactory.Result;

import library.domain.Address;
import library.domain.Person;


public class AddressRepository {
	String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	Connection connection;
	
	private boolean tableExists;
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement count;
	PreparedStatement lastId;
	PreparedStatement selectPage;
	
	public AddressRepository(){
		
		try {
			
			connection = DriverManager.getConnection(url);
			
			insert = connection.prepareStatement(""
					+ "INSERT INTO address(street,city,postCode,country,houseNumber,localNumber,phone) VALUES (?,?,?,?,?,?,?)"
					+ "");
			
			selectById = connection.prepareStatement("SELECT * FROM address WHERE id=?");
			
			count = connection.prepareStatement("SELECT COUNT(*) FROM address");
			
			lastId = connection.prepareStatement("SELECT MAX(id) FROM address ");
			
			selectPage = connection.prepareStatement("SELECT * FROM address OFFSET ? LIMIT ?");
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("address"))
					tableExists=true;
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public Address selectById(int id)
	{
		Address result = null;
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			while(rs.next())
			{
				result = new Address();
				result.setId(rs.getInt("id"));
				result.setStreet(rs.getString("street"));
				result.setCity(rs.getString("city"));
				result.setPostCode(rs.getString("postCode"));
				result.setCountry(rs.getString("country"));
				result.setHouseNumber(rs.getString("houseNumber"));
				result.setLocalNumber(rs.getString("localNumber"));
				result.setPhone(rs.getString("phone"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int count()
	{
		try {
			ResultSet rs = count.executeQuery();
			while(rs.next())
			{
				return rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public int lastId()
	{
		try {
			ResultSet rs = count.executeQuery();
			while(rs.next())
			{
				return rs.getInt("id");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public List<Address> selectPage(int offset, int limit)
	{
		List<Address> result = new ArrayList<Address>();
		try {
			selectPage.setInt(1, offset);
			selectById.setInt(1, limit);
			ResultSet rs = selectPage.executeQuery();
			while(rs.next())
			{
				Address address = new Address();
				address.setId(rs.getInt("id"));
				address.setStreet(rs.getString("street"));
				address.setCity(rs.getString("city"));
				address.setPostCode(rs.getString("postCode"));
				address.setCountry(rs.getString("country"));
				address.setHouseNumber(rs.getString("houseNumber"));
				address.setLocalNumber(rs.getString("localNumber"));
				address.setPhone(rs.getString("phone"));
				result.add(address);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public void add(Address address){
		
		try {
			insert.setString(1,address.getStreet());
			insert.setString(2, address.getCity());
			insert.setString(3,address.getPostCode());
			insert.setString(4,address.getCountry());
			insert.setString(5, address.getHouseNumber());
			insert.setString(6,address.getLocalNumber());
			insert.setString(7, address.getPhone());
			insert.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
		
	}
	
	public void createTable(){
		
		String sql = "CREATE TABLE address("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "street varchar(20),"
				+ "city varchar(50),"
				+ "postCode varchar(20),"
				+ "country varchar(20),"
				+ "houseNumber varchar(20),"
				+ "localNumber varchar(20),"
				+ "phone varchar(20)"
				+ ")";
		
		try {
			Statement createTable = connection.createStatement();
			createTable.executeUpdate(sql);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
}
	
