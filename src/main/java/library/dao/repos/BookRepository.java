package library.dao.repos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import library.domain.Author;
import library.domain.Book;
import library.domain.Person;

public class BookRepository {
	
	String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	Connection connection;
	
	private boolean tableExists;
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement count;
	PreparedStatement lastId;
	PreparedStatement selectPage;
	PreparedStatement delete;
	PreparedStatement update;
	
	public BookRepository(){
		
		try {
			
			connection = DriverManager.getConnection(url);
			
			insert = connection.prepareStatement(""
					+ "INSERT INTO book(title, publisher, year, isAvailable) VALUES (?,?,?,?)"
					+ "");
			
			count = connection.prepareStatement("SELECT COUNT(*) FROM book");
			lastId = connection.prepareStatement("SELECT MAX(id) FROM book");
			selectPage = connection.prepareStatement(""
					+ "SELECT * FROM book OFFSET ? LIMIT ?"
					+ "");
			
			delete = connection.prepareStatement(""
					+ "DELETE FROM book WHERE id=?"
					+ "");
			
			update = connection.prepareStatement(""
					+ "UPDATE book SET (title, publisher, year, isAvailable) = (?,?, ?, ?) WHERE id=?"
					+ "");
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("book"))
					tableExists=true;
			}
		
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	

	public void update(Book book){
		
		try {
			
			update.setString(1, book.getTitle());
			update.setString(2, book.getPublisher());
			update.setInt(3, book.getYear());
			update.setBoolean(4, book.isAvailable());
			update.setInt(5, book.getId());
			update.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void delete(Book book){
		
		try {
			delete.setInt(1, book.getId());
			delete.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public Book get(int id){
		
		Book result = null;
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			
			while(rs.next()){
				result = new Book();
				result.setId(rs.getInt("id"));
				result.setTitle(rs.getString("title"));
				result.setPublisher(rs.getString("publisher"));
				result.setYear(rs.getInt("year"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public int count(){
		try {
			ResultSet rs = count.executeQuery();
			while(rs.next()){
				return rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public int lastId(){try {
		ResultSet rs = lastId.executeQuery();
		while(rs.next()){
			return rs.getInt(1);
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return 0;
	}
	
	public List<Book> getPage(int offset, int limit){
		List<Book> result = new ArrayList<Book>();
		try {
			selectPage.setInt(1, offset);
			selectPage.setInt(1, limit);
			ResultSet rs = selectPage.executeQuery();
			while(rs.next()){
				Book p = new Book();
				p.setId(rs.getInt("id"));
				p.setTitle(rs.getString("title"));
				p.setPublisher(rs.getString("publisher"));
				p.setYear(rs.getInt("year"));
				result.add(p);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public void add(Book book){
		
		try {
			insert.setString(1, book.getTitle());
			insert.setString(2, book.getPublisher());
			insert.setInt(3, book.getYear());
			insert.setBoolean(4, book.isAvailable());
			insert.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
		
		
	}
	
	public void createTable(){
		
		String sql = "CREATE TABLE book("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "title varchar(20),"
				+ "publisher varchar(50),"
				+ "year bigint,"
				+ "isAvailable boolean"
				+ ")";
		
		try {
			Statement createTable = connection.createStatement();
			if(!tableExists)
				createTable.executeUpdate(sql);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}
