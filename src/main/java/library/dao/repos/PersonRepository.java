package library.dao.repos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import library.domain.Person;

public class PersonRepository {

	String url = "jdbc:hsqldb:hsql://localhost/workdb";
	
	Connection connection;
	
	private boolean tableExists;
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement count;
	PreparedStatement lastId;
	PreparedStatement selectPage;
	
	public PersonRepository(){
		
		try {
			
			connection = DriverManager.getConnection(url);
		
			insert = connection.prepareStatement(""
					+ "INSERT INTO person(name, surname) VALUES (?,?)"
					+ "");
			selectById = connection.prepareStatement(""
					+ "SELECT * FROM person WHERE id=?");
			
			count = connection.prepareStatement("SELECT COUNT(*) FROM person");
			lastId = connection.prepareStatement("SELECT MAX(id) FROM person");
			selectPage = connection.prepareStatement(""
					+ "SELECT * FROM person OFFSET ? LIMIT ?"
					+ "");
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			
			while(rs.next()){
				if(rs.getString("TABLE_NAME").equalsIgnoreCase("person"))
					tableExists=true;
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int count(){
		try {
			ResultSet rs = count.executeQuery();
			while(rs.next()){
				return rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public int lastId(){try {
		ResultSet rs = lastId.executeQuery();
		while(rs.next()){
			return rs.getInt(1);
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return 0;
	}
	
	public List<Person> getPage(int offset, int limit){
		List<Person> result = new ArrayList<Person>();
		try {
			selectPage.setInt(1, offset);
			selectPage.setInt(1, limit);
			ResultSet rs = selectPage.executeQuery();
			while(rs.next()){
				Person p = new Person();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setSurname(rs.getString("surname"));
				result.add(p);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public Person get(int id){
		
		Person result = null;
		try {
			selectById.setInt(1, id);
			ResultSet rs = selectById.executeQuery();
			
			while(rs.next()){
				result = new Person();
				result.setId(rs.getInt("id"));
				result.setName(rs.getString("name"));
				result.setSurname(rs.getString("surname"));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public void add(Person person){
		
		try {
			insert.setString(1, person.getName());
			insert.setString(2, person.getSurname());
			insert.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
		
		
	}
	
	public void createTable(){
		
		String sql = "CREATE TABLE person("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "name varchar(20),"
				+ "surname varchar(50)"
				+ ")";
		
		try {
			Statement createTable = connection.createStatement();
			if(!tableExists)
				createTable.executeUpdate(sql);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
}
